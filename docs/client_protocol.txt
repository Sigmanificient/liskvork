This document contains everything you need to know to create an AI/client from
the ground up that can interact with liskvork, it is extremely close to the
original protocol used by piskvork and that is intentional.

The major difference is that liskvork uses TCP over using stdin/stdout to make
the whole testing and tournament process much easier.

You can see the original protocol here:
https://plastovicka.github.io/protocl2en.htm

The format of the command's documentation is as follow:

DATA_DIRECTION (Either c2s or s2c, client to server or server to client)
NAME_OF_THE_COMMAND WITH ARGUMENTS
DESCRIPTION
EXAMPLE

The data MUST not compressed in any way and each line MUST end with a '\n' (no
'\r'.) If you want to avoid network latency launch the server and the client on
the same machine, and that will solve your issue.

All coordinates MUST be 0 indexed (meaning 0,0 is the top left of the board.)

Any invalid command from a client MUST immediately result in a lose and end the
game.

---

s2c
INFO [key] [value]

The server MAY send some informations about the current state of the game as
key value pairs.

The following key value pairs can be received:
timeout_turn  - time limit for each move (milliseconds, 0=no limit)
timeout_match - time limit of a whole match (milliseconds, 0=no limit)
max_memory    - memory limit (bytes, 0=no limit)
time_left     - remaining time limit of a whole match (milliseconds)

PS: While the max_memory is given it is not possible for the server to enforce
it, it is up to the match organizers to check if that limit was respected.

The server MAY send this command at any time and the client MUST NOT reply this
message at all.

Example:
 INFO timeout_match 300000
 INFO timeout_turn 10000
 INFO max_memory 83886080
 INFO time_left 100000
 
 Expected answer: none

---

s2c
HELLO [NAME] [VERSION] "[MOTD]"

The server MUST send that command to every client when they connect to it.
It MUST give the NAME of the server, as well as a semver compatible VERSION
(See https://semver.org/), and an MOTD between quotes that MAY be empty.

The client MUST then answer with either PLAYER or SPECTATOR.
If the client answers with SPECTATOR it MUST then only use the protocol defined
in the gui_protocol.txt file, but if it answers PLAYER then it MUST answer to
the following protocol.

If the client chooses PLAYER it is expected to send back some information about
itself on a single line. Each different info MUST be comma-separated and all by
in the form KEY="VALUE".

The available keys are name, version, author, country, www, email.
The only mandatory field is name while the rest is completely optional.

Once the client has answered the server MUST answer with either OK or KO, the
latter accepting an OPTIONAL message with it

Example:
 The server sends:
  HELLO liskvork 0.1.0-dev "Frieren sure was one hell of a good show"
 The client answers:
  SPECTATOR
 The server sends:
  OK

 The server sends:
  HELLO really_cool_name 1.2.3 ""
 The client answers:
  PLAYER name="SmortBrain",version="1.0",author="emneo",country="FR",www="emneo.dev"
 The server sends:
  KO Too many players connected

---

s2c
BEGIN

The server MUST send that command to the first client to play, the client MUST
then answer if its move.

Expected answer:
 two numbers separated by comma - coordinates of the client's move

Example:
 The server sends:
  BEGIN
 The client answers:
  10,10

---

s2c
TURN [X],[Y]

The server MUST send a client the opponent's move and then the client MUST send
another move in response.

Expected answer:
 two comma-separated numbers - coordinates of the client's move

Example:
 The server sends:
  TURN 10,10
 The client answers:
  11,10

---

s2c
START [size]

The server MUST send this command to each client, and each client MUST
initialize a board of size SIZE, and then get ready for the start of the game.

The client MUST support SIZE=20, any other size MAY be safely refused with an
error message.

Example:
 The server sends:
  START 20
 The client answers:
  OK - everything is good
  ERROR message - unsupported size or other error

---

s2c
END [STATUS] "[MESSAGE]"

The server MUST send this command when the game needs to be stopped, either by
having a client win normally, a client send bad commands, or any other event
that warrants stopping a game.

The STATUS argument MUST contain either WIN, LOSE, TIE, ERROR.
THE MESSAGE argument MUST be a quote enclosed message, it MAY be empty.

The client MUST NOT answer that command and MAY be disconnected after it either
by the server or itself.

Example:
 The server sends:
  END WIN "The other player did not reply in time"

 The server sends:
  END ERROR "Internal server error"

---

c2s
UNKNOWN [message]

The client MAY send this as a response to a command that is unknown or not yet
implemented. That means the brain MUST NOT exit after receiving some strange 
line from the manager.
The server MUST implement that command.

---

c2s
ERROR [message]

The client MAY send this when it receives some known command, but is not able to
cope with it. For example if the memory limit is too small or the board is too
large.
The server MUST implement that command.

---

c2s
MESSAGE [message]

The client MAY send a message to the server, that message MAY be ignored by the
server and is not send to the other client to avoid abuse.
The server MUST implement that command.

Example:
 The client sends:
  MESSAGE I will be the winner  

---

c2s
DEBUG [message]
It is similar to MESSAGE command, but MAY be used for debugging information that
is useful only to the author of the client.

Example:
 The client sends:
  DEBUG The most promising move now is [10,14] alfa=10025 beta=8641
  DEBUG The most promising move now is [11,14] alfa=10125 beta=8641

-----

Version history

2024-09-15
Merge of the ABOUT command and the handshake, it made much more sense to do so
and also makes implementation much easier, because players could be taking a
slot while also not having given any informations yet, which could easily be
exploited.

2024-09-11
Initial creation of the protocol mainly taken from the official Gomoku
AI protocol.
